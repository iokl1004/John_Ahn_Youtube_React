20. 좋아요 싫어요 기능 (2) 템플릿, 데이터 가져오기

1. AntD를 이용하여 Like & DisLike 버튼 만들기
2. 현재 좋아요 싫어요 에 대한 정보를 DB 가져오기
 - 좋아요 싫어요 숫자
 - 내가 좋아요나 싫어요 둘 중 하나를 이미 눌렀는지
---
(client/src/components/views/VideoDetailPage/VideoDetailPage.js)
import React, { useEffect, useState } from 'react'
import { Row, Col, List, Avatar} from 'antd'
import Axios from 'axios'
import SideVideo from './Sections/SideVideo'        // 오른쪽 비디오들
import Subscribe from './Sections/Subscribe'        // 구독
import Comment from './Sections/Comment'            // 댓글
import LikeDislikes from './Sections/LikeDislikes'  // 좋아요/싫어요

function VideoDetailPage(props) {
    
    const videoId = props.match.params.videoId; // Video ID 값 가져오기!
    const variable = { videoId : videoId }      // videoId : videoId 값
    const [VideoDetail, setVideoDetail] = useState([]);
    const [Comments, setComments] = useState([]);   // Comments(댓글)가 담길 빈 배열을 만들어 준다.

    useEffect(() => {
        Axios.post('/api/video/getVideoDetail', variable)
        .then((response) => {
            if(response.data.success) {
                setVideoDetail(response.data.videoDetail)   // routes/video.js에서 전달 한 videoDetail값
            } else {
                alert('비디오 정보를 가져오길 실패했습니다.')
            }
        });

        // 해당 비디오의 모든 댓글을 가져오기
        Axios.post('/api/comment/getComments', variable)
        .then((response) => {
            if(response.data.success) {
                console.log(response.data.comments)
                setComments(response.data.comments)
            } else {
                alert('코멘트 정보를 가져오는 것을 실패 하였습니다.')
            }
        });
    }, [])

    const refreshFunction = (newComment) => {
        // 자식컴포넌트에서 버튼을 클릭하면, 자식에서 받아온 comment정보(새 댓글)를 newComment라고 한다.
        console.log(newComment);
        setComments(Comments.concat(newComment))    // Comments(댓글)가 담긴 배열에 자식에서 받아온 newComment(새 댓글)를 추가한다.
    }

    if(VideoDetail.writer) {

        //만약 페이지의 동영상이 본인의 동영상이면 구독버튼을 안보이게만든다.
        const subscribeButton = VideoDetail.writer._id !==
        localStorage.getItem('userId') && (
            <Subscribe
                userTo={VideoDetail.writer._id}
                userFrom={localStorage.getItem('userId')}
            />
        );
        //witer를 서버에서 가져오기전에 페이지를 렌더링 할려고해서
        //VideoDetail.writer.image 부분에서 type error가 발생한다.
        return (
            <Row gutter = {[16, 16]}>
                <Col lg={18} xs={24}>
        
                <div style={{ width : '100%', padding : '3rem 4rem' }}>
                    <video style = {{ width : '100%' }} src={`http://localhost:5000/${VideoDetail.filePath}`} controls />
        
                    <List.Item
                        // 해당 영상에 대한 좋아요/싫어요 가져오기
                        actions={[ <LikeDislikes
                                        video
                                        userId={localStorage.getItem('userId')}
                                        videoId={videoId}
                                    />
                                    , subscribeButton
                                ]}
                    >
                        <List.Item.Meta
                            avatar={<Avatar src ={VideoDetail.writer.image} />}
                            title={VideoDetail.writer.name}
                            description={VideoDetail.description}
                        />
                    </List.Item>
        
                    {/* Comment */}
                    <Comment
                        refreshFunction={refreshFunction}
                        commentLists={Comments}
                        postId={videoId}
                    />
        
                </div>
        
                </Col>
                <Col lg={6} xs={24}>
                    <SideVideo />
                </Col>
            </Row>
          )
    } else {
        return (
            <div>...loading</div>
        )
    }


}

export default VideoDetailPage
---
(client/src/components/views/VideoDetailPage/Section/SingleComment.js)
import React from 'react'
import { Comment, Avatar, Button, Input } from 'antd';
import { useState } from 'react';
import { useSelector } from 'react-redux';
import Axios from 'axios';
import LikeDislikes from './LikeDislikes';

const { TextArea } = Input;

function SingleComment(props) {

    const user = useSelector((state) => state.user);        // Login한 유저의 정보를 가져온다!
    const [OpenReply, setOpenRelpy] = useState(false);      // 대댓글 상태
    const [CommentValue, setCommentValue] = useState("")    // 대댓글

    // 대댓글 달기 버튼 클릭 시 대댓글입력 폼 유무
    const onClickReplyOpen = () => {
        setOpenRelpy(!OpenReply)
    }

    // 대댓글 값 변화
    const onHandleChange = (e) => {
        setCommentValue(e.currentTarget.value)
    }

    // 댓글 서버에 전송
    const onSubmit = (e) => {
        e.preventDefault(); // Submit 버튼 클릭 시, 새로고침 방지

        // 입력한 사람의 정보, 코멘트의 내용 여러가지 정보를 DB에 넣어줘야함
        const variables = {
            content : CommentValue          // 대댓글
          , writer : user.userData._id      // 대댓글단 유저의 ID (Login 한 유저의 ID)
          , postId : props.postId           // 비디오 ID
          , responseTo : props.comment._id  // 댓글단 유저의 ID
        }

        Axios.post('/api/comment/saveComment', variables)
        .then((response) => {
        if(response.data.success) {
            console.log(response.data.result)
            setCommentValue("");
            setOpenRelpy(false);                        // Submit 완료 후, 코멘트 작성창 닫기!
            props.refreshFunction(response.data.result) // 상위 컴포넌트에 새로운 댓글목록을 다시 전달함.
        } else {
            alert('코멘트를 저장하지 못했습니다.')
        }})
    }

    const actions = [
        // 해당 댓글에 대한 좋아요/싫어요 가져오기
        <LikeDislikes userId={localStorage.getItem('userId')} commentId={props.comment._id}/>
        , <span
            onClick={onClickReplyOpen}
            key="comment-basic-reply-to"
        >
            Reply to
        </span>
    ]

    return (
        <div>
            <Comment
                actions={actions}
                author={props.comment.writer.name}
                avatar={<Avatar src={props.comment.writer.image} />}
                content={<p>{props.comment.content}</p>}
            />
            
            {/* 대댓글 달기 버튼을 클릭 하였을때만 보이도록! */}
            {OpenReply && (
                <form style={{ display : 'flex'}} onSubmit={onSubmit}>
                    <textarea
                        style = {{ width : '100%', borderRadius : '5px' }}
                        onChange = {onHandleChange}
                        value = {CommentValue}
                        placeholder='코멘트를 작성해 주세요'
                    />
                    <br />
                    <button style ={{ width : '20%', height : '52px' }} onClick={onSubmit}>Submit</button>
                </form>
            )}
        </div>
    )
}

export default SingleComment
---
(client/src/components/views/VideoDetailPage/Sections/LikeDislikes.js)
import { useEffect, useState } from 'react';
import { Tooltip } from 'antd';
import {LikeOutlined, DislikeOutlined} from '@ant-design/icons';
import Axios from 'axios';

function LikeDislikes(props) {

    const [Likes, setLikes] = useState(0);                  // 좋아요 갯수
    const [DisLikes, setDisLikes] = useState(0);            // 싫어요 갯수
    const [LikeAction, setLikeAction] = useState();         // 좋아요 눌렀는지 판단 여부 변수
    const [DisLikeAction, setDisLikeAction] = useState();   // 싫어요 눌렀는지 판단 여부 변수

    let variable = {}

    if(props.video) {
        variable = { videoId: props.videoId, userId : props.userId}
    } else {
        variable = { commentID: props.commentId, userId : props.userId}
    }

    // 좋아요/싫어요 가져오기
    useEffect(() => {
        // 좋아요
        Axios.post('/api/like/getLikes', variable)
        .then(response=> {
            if(response.data.success) {
                // 얼마나 많은 좋아요를 받았는지
                setLikes(response.data.likes.length)

                // 내가 이미 해당 좋아요를 눌렀는지
                response.data.likes.map(like => {
                    // props.userId는 내 자신
                    // 해당 영상 좋아요를 클릭한 Id들
                    if(like.userId === props.userId) {
                        setLikeAction('liked')
                    }
                })
            } else {
                alert('Likes에 정보를 가져오는데 실패 하였습니다.')
            }
        })

        // 싫어요
        Axios.post('/api/like/getDisLikes', variable)
        .then(response=> {
            if(response.data.success) {
                // 얼마나 많은 싫어요를 받았는지
                setLikes(response.data.dislikes.length)

                // 내가 이미 해당 싫어요를 눌렀는지
                response.data.dislikes.map(dislike => {
                    // props.userId는 내 자신
                    // 해당 영상 싫어요를 클릭한 Id들
                    if(dislike.userId === props.userId) {
                        setLikeAction('disliked')
                    }
                })
            } else {
                alert('DisLikes에 정보를 가져오는데 실패 하였습니다.')
            }
        })

    }, [])

    return (
        <div>
            <span key="comment-basic-like">
                <Tooltip tile="Like">
                    <LikeOutlined
                        theme={LikeAction === "liked" ? 'filled' : 'outlined'}
                        onClick
                    />
                </Tooltip>
                <span style = {{ paddingLeft : '8px', cursor : 'auto' }}> {Likes} </span>
            </span>

            <span key="comment-basic-dislike">
                <Tooltip title="Dislike">
                    <DislikeOutlined
                        theme={DisLikeAction === "disliked" ? 'filled' : 'outlined'}
                        onClick
                    />
                    {/* <Icon type="dislike"
                        theme="<LikeOutlined />"
                        onClick
                    /> */}
                </Tooltip>
                <span tyle = {{ paddingLeft : '8px', cursor : 'auto' }}> {DisLikes} </span>
            </span>
        
        </div>
    )
}

export default LikeDislikes
---
(server/routes/like.js)
const express = require('express');
const router = express.Router();

// model 가져오기
const { Like } = require("../models/Like");
const { Dislike } = require("../models/Dislike");

// Like

// 해당 영상의 좋아요 정보들 가져오기
router.post("/getLikes", (req, res) => {
    let variable = {}

    // 해당 비디오의 좋아요 일경우
    if(req.body.videoId) {
        variable = { videoId : req.body.videoID}
    } else {
        variable = { videoId : req.body.commentID}
    }

    Like.find(variable)
    .exec((err, likes) => {
        if(err) return res.status(400).send(err)
            res.status(200).json({ success : true, likes })
    })
});

// 해당 영상의 싫어요 정보들 가져오기
router.post("/getDisLikes", (req, res) => {
    let variable = {}

    // 해당 비디오의 좋아요 일경우
    if(req.body.videoId) {
        variable = { videoId : req.body.videoID}
    } else {
        variable = { videoId : req.body.commentID}
    }

    Dislike.find(variable)
    .exec((err, dislikes) => {
        if(err) return res.status(400).send(err)
            res.status(200).json({ success : true, dislikes })
    })
});

module.exports = router;
---
(server/index.js)
const express = require("express");
const app = express();
const path = require("path");
const cors = require('cors')

const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");

const config = require("./config/key");

// const mongoose = require("mongoose");
// mongoose
//   .connect(config.mongoURI, { useNewUrlParser: true })
//   .then(() => console.log("DB connected"))
//   .catch(err => console.error(err));

const mongoose = require("mongoose");
const connect = mongoose.connect(config.mongoURI,
  {
    useNewUrlParser: true, useUnifiedTopology: true,
    useCreateIndex: true, useFindAndModify: false
  })
  .then(() => console.log('MongoDB Connected...'))
  .catch(err => console.log(err));

app.use(cors())

//to not get any deprecation warning or error
//support parsing of application/x-www-form-urlencoded post data
app.use(bodyParser.urlencoded({ extended: true }));
//to get json data
// support parsing of application/json type post data
app.use(bodyParser.json());
app.use(cookieParser());

app.use('/api/users', require('./routes/users'));
app.use('/api/video', require('./routes/video'));
app.use('/api/subscribe', require('./routes/subscribe'));   // 구독
app.use('/api/comment', require('./routes/comment'));       // 댓글
app.use('/api/like', require('./routes/like'));             // 좋아요

//use this to show the image you have in node js server to client (react js)
//https://stackoverflow.com/questions/48914987/send-image-path-from-node-js-express-server-to-react-client
app.use('/uploads', express.static('uploads'));

// Serve static assets if in production
if (process.env.NODE_ENV === "production") {

  // Set static folder   
  // All the javascript and css files will be read and served from this folder
  app.use(express.static("client/build"));

  // index.html for all page routes    html or routing and naviagtion
  app.get("*", (req, res) => {
    res.sendFile(path.resolve(__dirname, "../client", "build", "index.html"));
  });
}

const port = process.env.PORT || 5000

app.listen(port, () => {
  console.log(`Server Listening on ${port}`)
});