21. 좋아요 싫어요 기능 (3) 클릭시 기능들

1. onLike Func 만들기

2. onDisLike func 만들기
---
(client/src/components/views/VideoDetailPage/Sections/LikeDislikes.js)
import React, { useEffect, useState } from 'react';
import { Tooltip } from 'antd';
import {
  LikeOutlined,
  DislikeOutlined,
  LikeFilled,
  DislikeFilled,
} from '@ant-design/icons';
import Axios from 'axios';

function LikeDislikes(props) {
    const [Likes, setLikes] = useState(0);                      // 좋아요 갯수
    const [LikeAction, setLikeAction] = useState('');           // 좋아요 눌렀는지 판단 여부 변수
    const [Dislikes, setDislikes] = useState(0);                // 싫어요 갯수
    const [DisLikeAction, setDisLikeAction] = useState('');     // 싫어요 눌렀는지 판단 여부 변수

    let variable = {};
    if (props.video) {
        variable = { videoId: props.videoId, userId: props.userId };
    } else {
        variable = { commentId : props.commentId, userId: props.userId };
    }

    useEffect(() => {
        // 좋아요 가져오기
        Axios.post('/api/like/getLikes', variable).then((response) => {
            if (response.data.success) {

            //얼마나 많은 좋아요를 받았는지
            setLikes(response.data.likes.length);

            //내가 좋아요를 이미 눌렀는지
            response.data.likes.map((like) => {
                if (like.userId === props.userId) {
                    //pros.userId는 로그인한 사용자의 Id이기때문
                    setLikeAction('liked');
                }
            });
            } else {
                alert('Like에 대한 정보를 가져오지 못했습니다.');
            }
        });

        // 싫어요 가져오기
        Axios.post('/api/like/getDislikes', variable).then((response) => {
            if (response.data.success) {
            
            //얼마나 많은 싫어요를 받았는지
            setDislikes(response.data.dislikes.length);
            
            //내가 싫어요를 이미 눌렀는지
            response.data.dislikes.map((dislike) => {
                if (dislike.userId === props.userId) {
                    //pros.userId는 로그인한 사용자의 Id이기때문
                    setDisLikeAction('disliked');
                }
            });
            } else {
                alert('DisLike에 대한 정보를 가져오지 못했습니다.');
            }
        });
        }, []);

        // 좋아요 클릭
        const onLike = () => {
            // 클릭이 안되어 있을때
            if (LikeAction === '') {
                Axios.post('/api/like/upLike', variable).then((response) => {
                if (response.data.success) {
                    setLikes(Likes + 1);        // 좋아요 + 1
                    setLikeAction('liked');     // 좋아요 액션값 설정

                    // 싫어요가 클릭이 되어 있을경우
                    if (DisLikeAction !== '') {
                        setDisLikeAction('');       // 싫어요 액션값을 빈 값으로 설정
                        setDislikes(Dislikes - 1);  // 싫어요 - 1
                    }
                } else {
                    alert('Like를 올리지 못했습니다.');
                }
                });
            } else {    // 좋아요 클릭이 되어 있을 경우
                Axios.post('/api/like/unLike', variable).then((response) => {
                if (response.data.success) {
                    setLikes(Likes - 1);    // 좋아요 - 1
                    setLikeAction('');      // 좋아요 액션 값을 빈 값으로 설정
                } else {
                    alert('Like를 내리지 못했습니다.');
                }
                });
            }
        };

        // 싫어요 클릭
        const onDislike = () => {
            if (DisLikeAction !== '') { // 싫어요 액션값이 빈 값이 아닌 경우 (싫어요가 이미 클릭 되어 있는 경우)
                Axios.post('/api/like/unDislike', variable).then((response) => {
                if (response.data.success) {
                    setDislikes(Dislikes - 1);  // 싫어요 - 1
                    setDisLikeAction('');       // 싫어요 액션값 빈 값으로 설정
                } else {
                    alert('dislike를 지우지 못했습니다.');
                }
                });
            } else {    // 싫어요 액션값이 빈 값인 경우 (싫어요가 클릭 되어 있지 않는 경우)
                Axios.post('/api/like/upDislike', variable).then((response) => {
                if (response.data.success) {
                    setDislikes(Dislikes + 1);      // 싫어요 + 1
                    setDisLikeAction('disliked');   // 싫어요 설정값 설정

                    if (LikeAction !== '') {        // 만약 좋아요 액션값이 빈 값이 아닌 경우? (좋아요가 이미 클릭되어 있는 경우)
                    setLikeAction('');              // 좋아요 액션 값 빈 값 설정
                    setLikes(Likes - 1);            // 좋아요 - 1
                    }
                } else {
                    alert('dislike를 올리지 못했습니다.');
                }});
            }
        };

    return (
        <div>
            <span key="comment-basic-like">
                <Tooltip title="Like">
                {LikeAction === '' ? <LikeOutlined onClick={onLike} /> : <LikeFilled onClick={onLike} />}
                </Tooltip>
                <span style={{ paddingLeft: '4px', cursor: 'auto' }}> {Likes}</span>
            </span>&nbsp;&nbsp;

            <span key="comment-basic-dislike" style={{ marginLeft: '4px' }}>
                <Tooltip title="Dislike">
                {DisLikeAction === '' ? (
                    <DislikeOutlined onClick={onDislike} />
                ) : (
                    <DislikeFilled onClick={onDislike} />
                )}
                </Tooltip>
                <span style={{ paddingLeft: '4px', cursor: 'auto' }}> {Dislikes}</span>
            </span>&nbsp;&nbsp;
        </div>
    );
}

export default LikeDislikes;
---
(server/routes/like.js)
const express = require('express');
const router = express.Router();

// model 가져오기
const { Like } = require("../models/Like");
const { Dislike } = require("../models/Dislike");

// Like

router.post("/getLikes", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
      variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
      variable = { commentId: req.body.commentId, userId: req.body.userId };
    }
  
    Like.find(variable).exec((err, likes) => {
      if (err) return res.status(400).send(err);
      res.status(200).json({ success: true, likes });
    });
});
  
router.post("/getDislikes", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
    variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
    variable = { commentId: req.body.commentId, userId: req.body.userId };
    }

    Dislike.find(variable).exec((err, dislikes) => {
    if (err) return res.status(400).send(err);
    res.status(200).json({ success: true, dislikes });
    });
});

router.post("/upLike", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
        variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
        variable = { commentId: req.body.commentId, userId: req.body.userId };
    }
    // Like collection에다가 클릭 정보를 넣기
    const like = new Like(variable);
    like.save((err, likeResult) => {
        if (err) return res.json({ success: false, err });
    
        //만약 Dislike이 이미 클릭이 되어있다면, Dislike을 1 줄여준다.
        Dislike.findOneAndDelete(variable).exec((err, disLikeResult) => {
            if (err) return res.status(400).json({ success: false, err });
            res.status(200).json({ success: true });
        });
    });
});
      
router.post("/unLike", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
        variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
        variable = { commentId: req.body.commentId, userId: req.body.userId };
    }

    Like.findOneAndDelete(variable).exec((err, result) => {
        if (err) return res.status(400).json({ success: false, err });
        res.status(200).json({ success: true });
    });
});
      
router.post("/unDislike", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
        variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
        variable = { commentId: req.body.commentId, userId: req.body.userId };
    }

    Dislike.findOneAndDelete(variable).exec((err, result) => {
        if (err) return res.status(400).json({ success: false, err });
        res.status(200).json({ success: true });
    });
});
      
router.post("/upDislike", (req, res) => {
    let variable = {};
    if (req.body.videoId) {
        variable = { videoId: req.body.videoId, userId: req.body.userId };
    } else {
        variable = { commentId: req.body.commentId, userId: req.body.userId };
    }
    // DisLike collection에다가 클릭 정보를 넣기
    const dislike = new Dislike(variable);
    dislike.save((err, dislikeResult) => {
        if (err) return res.json({ success: false, err });

        //만약 like이 이미 클릭이 되어있다면, like을 1 줄여준다.
        Like.findOneAndDelete(variable).exec((err, LikeResult) => {
            if (err) return res.status(400).json({ success: false, err });
            res.status(200).json({ success: true });
        });
    });
});

module.exports = router;