18. 댓글 기능 생성 (4) ReplyComment

1. ReplyComment Component를 Comment.js에 만들기
2. Reply Comment 템플릿을 만들기
3. Calculate Child Comment Number
4. Complete Comment System
---
(client/src/components/views/VideoDetailPage/Sections/Comment.js)
import React, { useEffect, useState } from 'react'
import Axios from 'axios';
import { useSelector } from 'react-redux';
import SingleComment from './SingleComment';  // 댓글
import ReplyComment from './ReplyComment';    // 대댓글

function Comment(props) {
  const postId = props.postId;                         // 비디오 ID
  const user = useSelector((state) => state.user);      // Redux를 이용하여, Login한 유저의 정보를 가져온다!
  const [commentValue, setCommentValue] = useState(); // 댓글

  const handleClick = (e) => {
      setCommentValue(e.currentTarget.value);
  }

  const onSubmit = (e) => {
    // 댓글 버튼 클릭 시, 새로고침 방지
    e.preventDefault();

    const variables = {
        content : commentValue      // 댓글
      , writer : user.userData._id  // Login 한 유저의 ID
      , postId : postId             // 비디오 ID
    }

    // 입력한 사람의 정보, 코멘트의 내용 여러가지 정보를 DB에 넣어줘야함
    Axios.post('/api/comment/saveComment', variables)
    .then((response) => {
      if(response.data.success) {
        // console.log(response.data.result)
        setCommentValue("");
        props.refreshFunction(response.data.result) // 부모컴포넌트 DB에 저장된 댓글 정보를 전달해줌.
      } else {
        alert('코멘트를 저장하지 못했습니다.')
      }
    })
  }

  return (
    <div>
      {/* Coment Lists */}
      {props.commentLists &&
        props.commentLists.map((comment, index) => (
          !comment.responseTo && (
            <React.Fragment key={index}>
              <SingleComment
                refreshFunction={props.refreshFunction}
                comment={comment}
                postId={postId}
                key={index}
              />
              <ReplyComment
                refreshFunction={props.refreshFunction}
                commentLists={props.commentLists}
                parentCommentId = {comment._id}
                postId={postId}
              />
            </React.Fragment>
          )
      ))}

      {/* Root Comment Form */}

      <form style={{ display : 'flex'}} onSubmit={onSubmit} >
        <textarea
          style = {{ width : '100%', borderRadius : '5px' }}
          onChange={handleClick}
          value={commentValue}
          placeholder='코멘트를 작성해 주세요'
        />
        <br />
        <button style ={{ width : '20%', height : '52px' }} onClick={onSubmit}>Submit</button>
      </form>
    </div>
  )
}

export default Comment
---
(client/src/components/views/VideoDetailPage/Sections/SingleCommnet.js)
import React from 'react'
import { Comment, Avatar, Button, Input } from 'antd';
import { useState } from 'react';
import { useSelector } from 'react-redux';
import Axios from 'axios';

const { TextArea } = Input;

function SingleComment(props) {

    const user = useSelector((state) => state.user);        // Login한 유저의 정보를 가져온다!
    const [OpenReply, setOpenRelpy] = useState(false);      // 대댓글 상태
    const [CommentValue, setCommentValue] = useState("")    // 대댓글

    // 대댓글 달기 버튼 클릭 시 대댓글입력 폼 유무
    const onClickReplyOpen = () => {
        setOpenRelpy(!OpenReply)
    }

    // 대댓글 값 변화
    const onHandleChange = (e) => {
        setCommentValue(e.currentTarget.value)
    }

    // 댓글 서버에 전송
    const onSubmit = (e) => {
        e.preventDefault(); // Submit 버튼 클릭 시, 새로고침 방지

        // 입력한 사람의 정보, 코멘트의 내용 여러가지 정보를 DB에 넣어줘야함
        const variables = {
            content : CommentValue          // 대댓글
          , writer : user.userData._id      // 대댓글단 유저의 ID (Login 한 유저의 ID)
          , postId : props.postId           // 비디오 ID
          , responseTo : props.comment._id  // 댓글단 유저의 ID
        }

        Axios.post('/api/comment/saveComment', variables)
        .then((response) => {
        if(response.data.success) {
            console.log(response.data.result)
            setCommentValue("");
            setOpenRelpy(false);                        // Submit 완료 후, 코멘트 작성창 닫기!
            props.refreshFunction(response.data.result) // 상위 컴포넌트에 새로운 댓글목록을 다시 전달함.
        } else {
            alert('코멘트를 저장하지 못했습니다.')
        }})
    }

    const actions = [
        <span onClick={onClickReplyOpen} key = "comment-basic-reply-to"> Reply to</span>
    ]

    return (
        <div>
            <Comment
                actions={actions}
                author={props.comment.writer.name}
                avatar={<Avatar src={props.comment.writer.image} />}
                content={<p>{props.comment.content}</p>}
            />
            
            {/* 대댓글 달기 버튼을 클릭 하였을때만 보이도록! */}
            {OpenReply &&
                <form style={{ display : 'flex'}} onSubmit={onSubmit}>
                    <textarea
                        style = {{ width : '100%', borderRadius : '5px' }}
                        onChange = {onHandleChange}
                        value = {CommentValue}
                        placeholder='코멘트를 작성해 주세요'
                    />
                    <br />
                    <button style ={{ width : '20%', height : '52px' }} onClick={onSubmit}>Submit</button>
                </form>
            }
        </div>
    )
}

export default SingleComment
---
import React, { useEffect, useState } from 'react'
import SingleComment from './SingleComment'

function ReplyComment(props) {
    const [ChildCommentNumber, setChildCommentNumber] = useState(0)
    const [OpenReplyComments, setOpenReplyComments] = useState(false);

    useEffect(() => {
        let commentNumber = 0;
        props.commentLists.map((comment, index) => {
            if(comment.responseTo === props.parentCommentId) {
                commentNumber++;
            }
        });
        setChildCommentNumber(commentNumber);
    }, [props.commentLists])    // props.commentLists가 변경 될 때마다 실행되게 해라

    const renderReplyComment = (parentCommentId) => 
        props.commentLists.map((comment, index) => (
            <React.Fragment key={index}>
                {comment.responseTo === parentCommentId && (
                    <div style={{ width : '80%', marginLeft : '40px' }}>
                        <SingleComment
                            refreshFunction={props.refreshFunction}
                            comment={comment}
                            postId={props.postId}
                        />
                        <ReplyComment
                            refreshFunction={props.refreshFunction}
                            commentLists={props.commentLists}
                            postId={props.postId}
                            parentCommentId = {comment._id}
                        />
                    </div>
                )}
            </React.Fragment>
        ));
    

    const onHandleChange = () => {
        setOpenReplyComments(!OpenReplyComments);
    };

    return (
        <div>
            {ChildCommentNumber > 0 && (
                <p
                    style={{ fontSize : '14px', margin : 0, color : 'gray'}}
                    onClick={onHandleChange}
                >
                    View {ChildCommentNumber} more comment(s)
                </p>
            )
            }

            { OpenReplyComments && renderReplyComment(props.parentCommentId) }
        </div>
    )
}

export default ReplyComment
