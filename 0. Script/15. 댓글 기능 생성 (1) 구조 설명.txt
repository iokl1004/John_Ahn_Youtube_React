15. 댓글 기능 생성 (1) 구조 설명

1. 댓글 부분 구조 설명
 - Comment Collection
  - writer
  - postId
  - responseTo
  - content
2. Comment model 생성
3. 디테일 비디오 페이지에 Comment Coponent 만들기

COMMENT LISTS (SingleComment.js + ReplyComment.js)
	Single Comment
	1. USER INFO
	2. CONTENT
	3. COMMENT FORM
	4. ACTIONS ( LIKES & DISLIKES, REPLY TO)
		↓
	Reply Comment
	<SingleComment />
	<ReplyComment />
---
(client/src/components/views/VideoDetailPage/VideoDetailPage.js)
import React, { useEffect, useState } from 'react'
import { Row, Col, List, Avatar} from 'antd'
import Axios from 'axios'
import SideVideo from './Sections/SideVideo'    // 오른쪽 비디오들
import Subscribe from './Sections/Subscribe'    // 구독
import Comment from './Sections/Comment'        // 댓글

function VideoDetailPage(props) {
    
    const videoId = props.match.params.videoId  // Video ID 값 가져오기!
    const variable = { videoId : videoId }      // videoId : videoId 값
    const [VideoDetail, setVideoDetail] = useState([])

    useEffect(() => {
        Axios.post('/api/video/getVideoDetail', variable)
        .then(response => {
            if(response.data.success) {
                setVideoDetail(response.data.videoDetail)   // routes/video.js에서 전달 한 videoDetail값
            } else {
                alert('비디오 정보를 가져오길 실패했습니다.')
            }
        })
    }, [])

    if(VideoDetail.writer) {

        //만약 페이지의 동영상이 본인의 동영상이면 구독버튼을 안보이게만든다.
        const subscribeButton = VideoDetail.writer._id !==
        localStorage.getItem('userId') && (
            <Subscribe
            userTo={VideoDetail.writer._id}
            userFrom={localStorage.getItem('userId')}
            />
        );
        //witer를 서버에서 가져오기전에 페이지를 렌더링 할려고해서
        //VideoDetail.writer.image 부분에서 type error가 발생한다.
        return (
            <Row gutter = {[16, 16]}>
                <Col lg={18} xs={24}>
        
                <div style={{ width : '100%', padding : '3rem 4rem' }}>
                    <video style = {{ width : '100%' }} src={`http://localhost:5000/${VideoDetail.filePath}`} controls />
        
                    <List.Item
                        actions={[subscribeButton]}
                    >
                        <List.Item.Meta
                            avatar={<Avatar src ={VideoDetail.writer.image} />}
                            title={VideoDetail.writer.name}
                            description={VideoDetail.description}
                        />
                    </List.Item>
        
                    {/* Comment */}
                    <Comment />
        
                </div>
        
                </Col>
                <Col lg={6} xs={24}>
                    <SideVideo />
                </Col>
            </Row>
          )
    } else {
        return (
            <div>...loading</div>
        )
    }


}

export default VideoDetailPage
---
(server/models/Comment.js)
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const commentSchema = mongoose.Schema({
    writer : {
        type : Schema.Types.ObjectId,
        ref : 'User'
    },
    postId : {
        type : Schema.Types.ObjectId,
        ref : 'Video'
    },
    responseTo : {
        type : Schema.Types.ObjectId,
        ref : 'User'
    },
    content : {
        type : String
    }
}, { timestamps : true })   // 데이터를 만든 시각을 저장한다



const Comment = mongoose.model('Comment', commentSchema);

module.exports = { Comment }
---
(client/src/components/views/VideoDetailPage/Sections/Comment.js)
import React from 'react'

function Comment() {
  return (
    <div>
      Comment
    </div>
  )
}

export default Comment